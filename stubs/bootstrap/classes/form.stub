<?php

namespace App\Http\Livewire;

use App\Http\Livewire\[model]\[model]Index;
use App\[model];
use Livewire\Component;

class [model]Form extends Component
{
    protected $listeners = [
        'wantsCreate[model]' => 'create',
        'wantsEdit[model]' => 'edit',
        'wantsDelete[model]' => 'delete',
    ];
    /**
     * Control is editing status
     */
    public bool $is_editing = false;
    /**
     * Array of fields to serve as model
     */
    public array $fields = [
        'first_name',
    ];
    /**
     * Validation Rules
     */
    protected array $rules = [
        'fields.first_name' => 'required|min:3',
    ];

    /**
     * Render the view
     *
     * @return void
     */
    public function render()
    {
        return view('livewire.[model-snake].[model-snake]-form');
    }
    /**
     * Display the create form.
     *
     * @return void
     */
    public function create()
    {
        $this->resetValidation();
        $this->reset(['fields', 'is_editing']);

        $this->dispatchBrowserEvent('show-[model-snake]-modal-form');
    }
    /**
     * Store the new model.
     *
     * @return void
     */
    public function store()
    {
        $this->validate();

        [model]::create($this->fields);

        $this->emitTo([model]Index::class, '[model-snake]Saved');

        $this->dispatchBrowserEvent('close-[model-snake]-modal-form');
    }
    /**
     * Display the edit form.
     *
     * @param [model] $[model-snake]
     * @return void
     */
    public function edit([model] $[model-snake])
    {
        $this->resetValidation();

        $this->fill(['fields' => $[model-snake]->toArray(), 'is_editing' => true]);

        $this->dispatchBrowserEvent('show-[model-snake]-modal-form');
    }
    /**
     * Update the current model.
     *
     * @return void
     */
    public function update()
    {
        $this->validate();

        $[model-snake] = [model]::findOrFail($this->fields['id']);

        $[model-snake]->update($this->fields);

        $this->emitTo([model]Index::class, '[model-snake]Saved');

        $this->dispatchBrowserEvent('close-[model-snake]-modal-form');
    }
    /**
     * Reset validation when variables are updated
     *
     * @param string $propertyName
     * @return void
     */
    public function updated($propertyName)
    {
        $this->validateOnly($propertyName);
    }
    /**
     * Display the delete modal.
     *
     * @param [model] $[model-snake]
     * @return void
     */
    public function delete([model] $[model-snake])
    {
        $this->reset(['fields', 'is_editing']);
        $this->fill(['fields' => $[model-snake]->toArray()]);

        $this->dispatchBrowserEvent('show-delete-[model-snake]-modal');
    }
    /**
     * Delete current model.
     *
     * @param [model] $[model-snake]
     * @return void
     */
    public function completeDelete()
    {
        $[model-snake] = [model]::findOrFail($this->fields['id']);

        $this->dispatchBrowserEvent('close-delete-[model-snake]-modal');

        $[model-snake]->delete();

        $this->emitTo([model]Index::class, '[model-snake]Saved');
    }
}

<?php

namespace App\Http\Livewire\[model];

use Livewire\Component;
use [models-path]\[model];
use App\Http\Livewire\PaginationTrait;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;

class [model]Index extends Component
{
    use PaginationTrait;
    use AuthorizesRequests;

    public [model] $[model-snake];
    /**
     * Event Listeners
     *
     * @var array
     */
    protected $listeners = ['[model-snake]Saved' => '$refresh'];
    /**
     * Render the view when variables are updated.
     *
     * @return void
     */
    public function render()
    {
        $this->authorize('viewAny', [model]::class);

        $this->defaultSortField = 'first_name';

        return view('livewire.[model-snake].[model-snake]-index', [
            '[model-snake-plural]' => $this->getPaginatedData(
                $query = [model]::query(),
                $searchableFields =  [
                    'name',
                ]
            )
        ]);
    }
    /**
     * Wants to create a new model
     *
     * @return void
     */
    public function create()
    {
        $this->emitTo([model]Form::class, 'wantsCreate[model]');
    }
    /**
     * Wants to Edit model
     *
     * @param [model] $[model-snake]
     * @return void
     */
    public function edit([model] $[model-snake])
    {
        $this->emitTo([model]Form::class, 'wantsEdit[model]', $[model-snake]);
    }
    /**
     * Wants to show model detail
     *
     * @param [model] $[model-snake]
     * @return void
     */
    public function show([model] $[model-snake])
    {
        $this->emitTo([model]Detail::class, 'wantsShow[model]', $[model-snake]);
    }
}
